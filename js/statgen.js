"use strict";const RACE_JSON_URL="data/races.json";let amount,count,raceData;function loadRaceJson(){DataUtil.loadJSON(RACE_JSON_URL).then(onJsonLoad)}function onJsonLoad(e){BrewUtil.pAddBrewData().then(a=>{raceData=EntryRenderer.race.mergeSubraces(e.race),a.race&&(raceData=raceData.concat(a.race)),$("#rollbutton").click(rollstats);const o=RollerUtil.isCrypto(),n=o?"Numbers will be generated using Crypto.getRandomValues()":"Numbers will be generated using Math.random()";$("#roller-mode").html(`Cryptographically strong random generation: <span title="${n}" class="crypto-${o}">${o?'<span class="glyphicon glyphicon-lock"></span> enabled':'<span class="glyphicon glyphicon-ban-circle"></span> not available'}</span>`),$(function(){$("#reset").click(function(){$(".base").val(8),$(".choose").prop("checked",!1),changeTotal(),changeBase()})}),$(".base").on("input",changeBase),$("input.choose").on("change",choose);const t=raceData.map(e=>e.name).sort().map(e=>`<option>${e}</option>`).join();$("#race").append("<option>None</option>").append('<option value="_CUSTOM">Custom</option>').append(t).change(changeRace).change(),window.location.hash?window.onhashchange():window.location.hash="#rolled"}).catch(BrewUtil.purgeBrew)}window.onload=function(){loadRaceJson(),prevent()};const STATS_MIN=8,STATS_MAX=15;function prevent(){$(".base").each((e,a)=>{$(a).on("change",function(e){let a=parseInt(this.value);isNaN(a)?this.value=8:this.value=Math.max(Math.min(a,STATS_MAX),STATS_MIN),changeTotal()})})}function getCost(e){return e<14?e-8:14===e?7:9}function choose(){if($("input.choose:checked").length>count)return this.checked=!1;$(".racial",this.parentNode.parentNode).val(this.checked?amount:0),changeTotal()}function changeRace(){function e(e){$(".racial").val(0);for(const a in e)$(`#${a} .racial`).val(e[a]);if(changeTotal(),$(".choose").hide().prop("checked",!1),!e.choose)return;const{from:a}=e.choose[0];amount=e.choose[0].amount||1,count=e.choose[0].count,$("td.choose").text(`Choose ${count}`).show(),a.forEach(e=>$(`#${e} .choose`).show())}const a=this.value;if("_CUSTOM"===a){$("#custom").show();const a=$(".custom");a.off("input").on("input",()=>{const o={};a.each((e,a)=>{const n=Number($(a).val());o[$(a).attr("name")]=n||0}),e(o)})}else{$("#custom").hide(),e("None"===a?{}:raceData.find(({name:e})=>e===a).ability)}}function changeTotal(){$("#pointbuy tr[id]").each((e,a)=>{const[o,n,t,c]=$("input",a).get(),s=t.value=Number(o.value)+Number(n.value);c.value=Math.floor((s-10)/2)})}function changeBase(e){const a=Number($("#budget").val());let o=0;if($(".base").each((e,a)=>o+=getCost(Number(a.value))),o>a)return this.value=this.dataset.prev;this.dataset.prev=this.value,$("#remaining").val(a-o),changeTotal()}function rollstats(){const e=$("#stats-formula").val(),a=[];for(let o=0;o<6;o++)a.push(EntryRenderer.dice.parseRandomise(e));const o=$("#rolled");~a.findIndex(e=>!e)?o.find("#rolls").prepend("<p>Invalid dice formula!</p>"):o.find("#rolls").prepend(`<p class="stat-roll-line">${a.map(e=>`<span class="stat-roll-item" title="${EntryRenderer.dice.getDiceSummary(e,!0)}">${e.total}</span>`).join("")}</p>`),o.find("#rolls p:eq(10)").remove()}window.onhashchange=function(){let e=window.location.hash.slice(1);$(".statmethod").hide(),""===e&&(e="rolled"),$("#"+e).show()};