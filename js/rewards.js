"use strict";const JSON_URL="data/rewards.json";let list;window.onload=function(){ExcludeUtil.initialise(),DataUtil.loadJSON(JSON_URL).then(onJsonLoad)};const sourceFilter=getSourceFilter(),typeFilter=new Filter({header:"Type",items:["Blessing","Boon","Charm"]});let filterBox;function onJsonLoad(t){filterBox=initFilterBox(sourceFilter,typeFilter),(list=ListUtil.search({valueNames:["name","source"],listClass:"rewards"})).on("updated",()=>{filterBox.setCount(list.visibleItems.length,list.items.length)}),$(filterBox).on(FilterBox.EVNT_VALCHANGE,handleFilterChange);ListUtil.initSublist({valueNames:["name","id"],listClass:"subrewards",getSublistRow:getSublistItem});addRewards(t),BrewUtil.pAddBrewData().then(addRewards).catch(BrewUtil.purgeBrew).then(()=>{BrewUtil.makeBrewButton("manage-brew"),BrewUtil.bind({list:list,filterBox:filterBox,sourceFilter:sourceFilter}),ListUtil.loadState(),RollerUtil.addListRollButton(),History.init(!0)})}let rewardList=[],rwI=0;function addRewards(t){if(!t.reward||!t.reward.length)return;rewardList=rewardList.concat(t.reward);let e="";for(;rwI<rewardList.length;rwI++){const t=rewardList[rwI];ExcludeUtil.isExcluded(t.name,"reward",t.source)||(e+=`\n\t\t\t<li class='row' ${FLTR_ID}='${rwI}' onclick="ListUtil.toggleSelected(event, this)" oncontextmenu="ListUtil.openContextMenu(event, this)">\n\t\t\t\t<a id='${rwI}' href="#${UrlUtil.autoEncodeHash(t)}" title="${t.name}">\n\t\t\t\t\t<span class='name col-xs-10'>${t.name}</span>\n\t\t\t\t\t<span class='source col-xs-2 source${Parser.sourceJsonToAbv(t.source)}' title="${Parser.sourceJsonToFull(t.source)}">${Parser.sourceJsonToAbv(t.source)}</span>\n\t\t\t\t</a>\n\t\t\t</li>`,sourceFilter.addIfAbsent(t.source),typeFilter.addIfAbsent(t.type))}const r=ListUtil.getSearchTermAndReset(list);$("ul.rewards").append(e),sourceFilter.items.sort(SortUtil.ascSort),typeFilter.items.sort(SortUtil.ascSort),list.reIndex(),r&&list.search(r),list.sort("name"),filterBox.render(),handleFilterChange(),ListUtil.setOptions({itemList:rewardList,getSublistRow:getSublistItem,primaryLists:[list]}),ListUtil.bindPinButton(),EntryRenderer.hover.bindPopoutButton(rewardList),UrlUtil.bindLinkExportButton(filterBox),ListUtil.bindDownloadButton(),ListUtil.bindUploadButton()}function handleFilterChange(){const t=filterBox.getValues();list.filter(function(e){const r=rewardList[$(e.elm).attr(FLTR_ID)];return filterBox.toDisplay(t,r.source,r.type)}),FilterBox.nextIfHidden(rewardList)}function getSublistItem(t,e){return`\n\t\t<li class="row" ${FLTR_ID}="${e}" oncontextmenu="ListUtil.openSubContextMenu(event, this)">\n\t\t\t<a href="#${UrlUtil.autoEncodeHash(t)}" title="${t.name}">\n\t\t\t\t<span class="name col-xs-12">${t.name}</span>\t\t\n\t\t\t\t<span class="id hidden">${e}</span>\t\t\t\t\n\t\t\t</a>\n\t\t</li>\n\t`}function loadhash(t){EntryRenderer.getDefaultRenderer().setFirstSection(!0);const e=$("#pagecontent").empty(),r=rewardList[t];e.append(`\n\t\t${EntryRenderer.utils.getBorderTr()}\n\t\t${EntryRenderer.utils.getNameTr(r)}\n\t\t<tr id="text"><td class="divider" colspan="6"><div></div></td></tr>\n\t\t${EntryRenderer.reward.getRenderedString(r)}\n\t\t${EntryRenderer.utils.getBorderTr()}\n\t`),ListUtil.updateSelected()}function loadsub(t){filterBox.setFromSubHashes(t),ListUtil.setFromSubHashes(t)}