"use strict";const JSON_URL="data/names.json";let nameList;const renderer=EntryRenderer.getDefaultRenderer();function makeContentsBlock(t,n){let e="<ul>";return n.tables.forEach((a,l)=>{const r=getTableName(n,a);e+=`<li>\n\t\t\t\t<a id="${t},${l}" href="#${UrlUtil.encodeForHash([n.race,n.source,a.option])}" title="${r}">${r}</a>\n\t\t\t</li>`}),e+="</ul>"}function getTableName(t,n){return`${t.race} - ${n.option}`}function onJsonLoad(t){nameList=t.name;const n=$("ul.names");let e="";for(let t=0;t<nameList.length;t++){const n=nameList[t];e+=`<li>\n\t\t\t\t<span class="name" onclick="showHideList(this)" title="Source: ${Parser.sourceJsonToFull(n.source)}">${n.race}</span>\n\t\t\t\t${makeContentsBlock(t,n)}\n\t\t\t</li>`}n.append(e);ListUtil.search({valueNames:["name"],listClass:"names"});History.init(!0)}function showHideList(t){$(t).next("ul").toggle()}function loadhash(t){renderer.setFirstSection(!0);const[n,e]=t.split(",").map(t=>Number(t)),a=nameList[n],l=a.tables[e].table;let r=`\n\t\t<tr>\n\t\t\t<td colspan="6">\n\t\t\t\t<table class="striped-odd">\n\t\t\t\t\t<caption>${getTableName(a,a.tables[e])}</caption>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class="col-xs-2 text-align-center">\n\t\t\t\t\t\t\t\t<span class="roller" onclick="rollAgainstTable('${n}', '${e}')">d${a.tables[e].diceType}</span>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class="col-xs-10">Name</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>`;for(let t=0;t<l.length;t++){r+=`<tr><td class="text-align-center">${l[t].min===l[t].max?pad(l[t].min):`${pad(l[t].min)}-${pad(l[t].max)}`}</td><td>${getRenderedText(l[t].enc)}</td></tr>`}r+="\n\t\t\t\t</table>\n\t\t\t</td>\n\t\t</tr>",$("#pagecontent").html(r)}function pad(t){return String(t).padStart(2,"0")}function getRenderedText(t){if(-1!==t.indexOf("{@")){const n=[];return renderer.recursiveEntryRender(t,n),n.join("")}return t}function rollAgainstTable(t,n){t=Number(t),n=Number(n);const e=nameList[t],a=e.tables[n],l=a.table;l._rMax=null==l.rMax?Math.max(...l.filter(t=>null!=t.min).map(t=>t.min),...l.filter(t=>null!=t.max).map(t=>t.max)):l.rMax,l._rMin=null==l._rMin?Math.min(...l.filter(t=>null!=t.min).map(t=>t.min),...l.filter(t=>null!=t.max).map(t=>t.max)):l._rMin;const r=RollerUtil.randomise(l._rMax,l._rMin);let s;for(let t=0;t<l.length;t++){const n=l[t],e=null!=n.max&&n.max<n.min?n.max:n.min,a=null!=n.max&&n.max>n.min?n.max:n.min;if(r>=e&&r<=a){s=getRenderedText(n.enc);break}}s=s.replace(DICE_REGEX,function(t){return`<span class="roller" onclick="reroll(this)">${t}</span> <span class="result">(${EntryRenderer.dice.parseRandomise(t).total})</span>`}),EntryRenderer.dice.addRoll({name:`${e.race} - ${a.option}`},`<span><strong>${pad(r)}</strong> ${s}</span>`)}function reroll(t){const n=$(t),e=EntryRenderer.dice.parseRandomise(n.html());n.next(".result").html(`(${e.total})`)}window.onload=function(){DataUtil.loadJSON(JSON_URL).then(onJsonLoad)};