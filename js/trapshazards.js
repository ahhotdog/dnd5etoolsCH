"use strict";const JSON_URL="data/trapshazards.json";window.onload=function(){ExcludeUtil.initialise(),DataUtil.loadJSON(JSON_URL).then(onJsonLoad)};const sourceFilter=getSourceFilter();let filterBox,list;function onJsonLoad(t){list=ListUtil.search({valueNames:["name","trapType","source"],listClass:"trapshazards",sortFunction:SortUtil.listSort});const e=new Filter({header:"Type",items:["MECH","MAG","SMPL","CMPX","HAZ"],displayFn:Parser.trapTypeToFull});filterBox=initFilterBox(sourceFilter,e),list.on("updated",()=>{filterBox.setCount(list.visibleItems.length,list.items.length)}),$(filterBox).on(FilterBox.EVNT_VALCHANGE,handleFilterChange);ListUtil.initSublist({valueNames:["name","type","id"],listClass:"subtrapshazards",getSublistRow:getSublistItem});ListUtil.initGenericPinnable(),addTrapsHazards(t),BrewUtil.pAddBrewData().then(handleBrew).catch(BrewUtil.purgeBrew).then(()=>{BrewUtil.makeBrewButton("manage-brew"),BrewUtil.bind({list:list,filterBox:filterBox,sourceFilter:sourceFilter}),ListUtil.loadState(),RollerUtil.addListRollButton(),History.init(!0)})}function handleBrew(t){addTrapsHazards({trap:t.trap}),addTrapsHazards({hazard:t.hazard})}let trapsAndHazardsList=[],thI=0;function addTrapsHazards(t){if(!(t.trap&&t.trap.length||t.hazard&&t.hazard.length))return;t.trap&&t.trap.length&&(trapsAndHazardsList=trapsAndHazardsList.concat(t.trap)),t.hazard&&t.hazard.length&&(t.hazard.forEach(t=>t.trapType="HAZ"),trapsAndHazardsList=trapsAndHazardsList.concat(t.hazard));let e="";for(;thI<trapsAndHazardsList.length;thI++){const t=trapsAndHazardsList[thI];if("HAZ"===t.trapType&&ExcludeUtil.isExcluded(t.name,"hazard",t.source))continue;if("HAZ"!==t.trapType&&ExcludeUtil.isExcluded(t.name,"trap",t.source))continue;const r=Parser.sourceJsonToAbv(t.source);e+=`\n\t\t\t<li class="row" ${FLTR_ID}="${thI}" onclick="ListUtil.toggleSelected(event, this)" oncontextmenu="ListUtil.openContextMenu(event, this)">\n\t\t\t\t<a id="${thI}" href="#${UrlUtil.autoEncodeHash(t)}" title="${t.name}">\n\t\t\t\t\t<span class="name col-xs-6">${t.name}</span>\n\t\t\t\t\t<span class="trapType col-xs-4">${Parser.trapTypeToFull(t.trapType)}</span>\n\t\t\t\t\t<span class="source col-xs-2 source${r}" title="${Parser.sourceJsonToFull(t.source)}">${r}</span>\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t`,sourceFilter.addIfAbsent(t.source)}const r=ListUtil.getSearchTermAndReset(list);$("#trapsHazardsList").append(e),sourceFilter.items.sort(SortUtil.ascSort),list.reIndex(),r&&list.search(r),list.sort("name"),filterBox.render(),handleFilterChange(),ListUtil.setOptions({itemList:trapsAndHazardsList,getSublistRow:getSublistItem,primaryLists:[list]}),ListUtil.bindPinButton(),EntryRenderer.hover.bindPopoutButton(trapsAndHazardsList),UrlUtil.bindLinkExportButton(filterBox),ListUtil.bindDownloadButton(),ListUtil.bindUploadButton()}function handleFilterChange(){const t=filterBox.getValues();list.filter(function(e){const r=trapsAndHazardsList[$(e.elm).attr(FLTR_ID)];return filterBox.toDisplay(t,r.source,r.trapType)}),FilterBox.nextIfHidden(trapsAndHazardsList)}function getSublistItem(t,e){return`\n\t\t<li class="row" ${FLTR_ID}="${e}" oncontextmenu="ListUtil.openSubContextMenu(event, this)">\n\t\t\t<a href="#${UrlUtil.autoEncodeHash(t)}" title="${t.name}">\n\t\t\t\t<span class="name col-xs-8">${t.name}</span>\t\t\n\t\t\t\t<span class="type col-xs-4">${Parser.trapTypeToFull(t.trapType)}</span>\t\t\n\t\t\t\t<span class="id hidden">${e}</span>\t\t\t\t\n\t\t\t</a>\n\t\t</li>\n\t`}const renderer=EntryRenderer.getDefaultRenderer();function loadhash(t){renderer.setFirstSection(!0);const e=trapsAndHazardsList[t],r=[];renderer.recursiveEntryRender({entries:e.entries},r,2);const a=EntryRenderer.traphazard.getSimplePart(renderer,e),s=EntryRenderer.traphazard.getComplexPart(renderer,e);$("#pagecontent").empty().append(`\n\t\t${EntryRenderer.utils.getBorderTr()}\n\t\t${EntryRenderer.utils.getNameTr(e)}\n\t\t<tr class="text"><td colspan="6"><i>${EntryRenderer.traphazard.getSubtitle(e)}</i></td>\n\t\t<tr class="text"><td colspan="6">${r.join("")}${a||""}${s||""}</td></tr>\n\t\t${EntryRenderer.utils.getPageTr(e)}\n\t\t${EntryRenderer.utils.getBorderTr()}\n\t`),ListUtil.updateSelected()}